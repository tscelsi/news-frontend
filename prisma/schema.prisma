// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    feed          Feed?
}

model VerificationToken {
    identifier String   @id @default(auto()) @map("_id") @db.ObjectId
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// CUSTOM SCHEMAS

model Article {
    id            String    @id @map("_id") @db.ObjectId
    outlet        String
    url           String    @unique
    title         String
    body          String
    created       DateTime
    modified      DateTime
    published     DateTime
    scrape_time   DateTime
    extra         String?
    prefix        String
    tags          String[]
    author        String[]
    wordCount     Int?
    queryLabels        Label[] @relation(name: "queryLabels")
    answerLabels        Label[] @relation(name: "answerLabels")
}


model Feed {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String
    user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId        String    @unique @db.ObjectId
    outlets       FeedOutlet[]
    created_at    DateTime  @default(now())
    modified_at   DateTime  @default(now())
}

model FeedOutlet {
    id           String    @id @default(auto()) @map("_id") @db.ObjectId
    feed         Feed      @relation(fields: [feedId], references: [id], onDelete: Cascade)
    feedId       String    @db.ObjectId
    outlet       Outlet    @relation(fields: [outletId], references: [id])
    outletId     String    @db.ObjectId
    prefix       String
    outletRef    String
    created_at   DateTime  @default(now())
    modified_at  DateTime  @default(now())
}

model Outlet {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    ref           String
    name          String
    base_url      String
    outlets       FeedOutlet[]
    created_at    DateTime  @default(now())
    modified_at   DateTime  @default(now())
}

model Label {
    id          String    @id @default(auto()) @map("_id") @db.ObjectId
    label       String
    count       Int
    articleQId  String    @db.ObjectId
    articleAId  String    @db.ObjectId
    articleQ    Article   @relation(fields: [articleQId], references: [id], name: "queryLabels")
    articleA    Article   @relation(fields: [articleAId], references: [id], name: "answerLabels")

    @@unique([articleQId, articleAId, label])
}